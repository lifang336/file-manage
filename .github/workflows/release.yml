name: Build and Release

on:
  push:
    tags:
      - "v*" # 当推送以 v 开头的标签时触发，如 v1.0.0
  workflow_dispatch: # 允许手动触发

jobs:
  build:
    runs-on: ${{ matrix.os }}

    strategy:
      matrix:
        os: [macos-latest, windows-latest]

    steps:
      - name: 检出代码
        uses: actions/checkout@v4

      - name: 设置 Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"

      - name: 安装 pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 8

      - name: 获取 pnpm store 目录
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - name: 设置 pnpm 缓存
        uses: actions/cache@v3
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: 安装依赖
        run: pnpm install

      - name: 构建应用
        run: pnpm build

      - name: 打包应用 (macOS)
        if: matrix.os == 'macos-latest'
        run: pnpm exec electron-builder --mac --publish=never

      - name: 打包应用 (Windows)
        if: matrix.os == 'windows-latest'
        run: pnpm exec electron-builder --win --publish=never

      - name: 上传构建产物 (macOS)
        if: matrix.os == 'macos-latest'
        uses: actions/upload-artifact@v4
        with:
          name: macos-build
          path: |
            release/*.dmg
            release/*.zip
            release/*.yml

      - name: 上传构建产物 (Windows)
        if: matrix.os == 'windows-latest'
        uses: actions/upload-artifact@v4
        with:
          name: windows-build
          path: |
            release/*.exe
            release/*.blockmap
            release/*.yml

  release:
    needs: build
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')

    steps:
      - name: 检出代码
        uses: actions/checkout@v4

      - name: 下载所有构建产物
        uses: actions/download-artifact@v4

      - name: 获取版本号
        id: get_version
        run: echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT

      - name: 创建 Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ steps.get_version.outputs.VERSION }}
          name: 智能文件管理器 ${{ steps.get_version.outputs.VERSION }}
          body: |
            ## 更新内容

            ### 新功能
            - 请在此处添加新功能说明

            ### 修复
            - 请在此处添加修复内容

            ### 改进
            - 请在此处添加改进内容

            ## 下载说明

            - **Windows 用户**: 下载 `智能文件管理器 Setup *.exe` 文件
            - **macOS 用户**: 下载 `智能文件管理器-*.dmg` 文件

            ## 安装说明

            ### Windows
            1. 下载 `.exe` 安装包
            2. 双击运行安装程序
            3. 按照提示完成安装

            ### macOS
            1. 下载 `.dmg` 文件
            2. 双击打开 DMG 文件
            3. 将应用拖拽到 Applications 文件夹
          files: |
            macos-build/*
            windows-build/*
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
